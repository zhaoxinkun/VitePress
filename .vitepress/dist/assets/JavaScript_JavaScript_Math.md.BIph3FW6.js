import{_ as s,c as i,o as a,a3 as h}from"./chunks/framework.7ep0oyv4.js";const g=JSON.parse('{"title":"Math","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/JavaScript/Math.md","filePath":"JavaScript/JavaScript/Math.md","lastUpdated":null}'),t={name:"JavaScript/JavaScript/Math.md"},l=h(`<h1 id="math" tabindex="-1">Math <a class="header-anchor" href="#math" aria-label="Permalink to &quot;Math&quot;">​</a></h1><blockquote><p>📌不是一种数据类型，是一个内置对象</p></blockquote><h2 id="math-abs-x" tabindex="-1"><code>Math.abs(x)</code> <a class="header-anchor" href="#math-abs-x" aria-label="Permalink to &quot;\`Math.abs(x)\`&quot;">​</a></h2><ul><li>返回指定数字的绝对值。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 10</span></span></code></pre></div><h2 id="math-ceil-x" tabindex="-1"><code>Math.ceil(x)</code> <a class="header-anchor" href="#math-ceil-x" aria-label="Permalink to &quot;\`Math.ceil(x)\`&quot;">​</a></h2><ul><li>返回大于或等于指定数字的最小整数。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ceil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 5</span></span></code></pre></div><h2 id="math-floor-x" tabindex="-1"><code>Math.floor(x)</code> <a class="header-anchor" href="#math-floor-x" aria-label="Permalink to &quot;\`Math.floor(x)\`&quot;">​</a></h2><ul><li>返回小于或等于指定数字的最大整数。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4</span></span></code></pre></div><h2 id="math-round-x" tabindex="-1"><code>Math.round(x)</code> <a class="header-anchor" href="#math-round-x" aria-label="Permalink to &quot;\`Math.round(x)\`&quot;">​</a></h2><ul><li>返回指定数字的四舍五入值。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">round</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 5</span></span></code></pre></div><h2 id="math-max-args" tabindex="-1"><code>Math.max(...args)</code> <a class="header-anchor" href="#math-max-args" aria-label="Permalink to &quot;\`Math.max(...args)\`&quot;">​</a></h2><ul><li>返回一组数字中的最大值。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 10</span></span></code></pre></div><h2 id="math-min-args" tabindex="-1"><code>Math.min(...args)</code> <a class="header-anchor" href="#math-min-args" aria-label="Permalink to &quot;\`Math.min(...args)\`&quot;">​</a></h2><ul><li>返回一组数字中的最小值。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">min</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 5</span></span></code></pre></div><h2 id="math-pow-x-y" tabindex="-1"><code>Math.pow(x, y)</code> <a class="header-anchor" href="#math-pow-x-y" aria-label="Permalink to &quot;\`Math.pow(x, y)\`&quot;">​</a></h2><ul><li>返回 x 的 y 次幂。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 8</span></span></code></pre></div><h2 id="math-sqrt-x" tabindex="-1"><code>Math.sqrt(x)</code> <a class="header-anchor" href="#math-sqrt-x" aria-label="Permalink to &quot;\`Math.sqrt(x)\`&quot;">​</a></h2><ul><li>返回指定数字的平方根。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4</span></span></code></pre></div><h2 id="math-random" tabindex="-1"><code>Math.random()</code> <a class="header-anchor" href="#math-random" aria-label="Permalink to &quot;\`Math.random()\`&quot;">​</a></h2><ul><li>返回一个 0 到 1 之间的随机数。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0.456789123</span></span></code></pre></div><h2 id="math-tofixed" tabindex="-1"><code>Math.toFixed（）</code> <a class="header-anchor" href="#math-tofixed" aria-label="Permalink to &quot;\`Math.toFixed（）\`&quot;">​</a></h2><ul><li>会变成字符串</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // toFixed()  小数保留几位，想要留几位就在括号里面写几 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Math.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toFixed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;3.14&#39; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toFixed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div><h2 id="math-pi" tabindex="-1"><code>Math.PI</code> <a class="header-anchor" href="#math-pi" aria-label="Permalink to &quot;\`Math.PI\`&quot;">​</a></h2><ul><li><code>Math.PI</code> 得到的是 <code>π</code> 的值，也就是 <code>3.1415936...</code></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Math.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3.141592653589793</span></span></code></pre></div><p>因为计算机的计算精度问题，只能得到小数点后 15 位</p><p><strong>使用 Math.PI 的时候，是不需要加 () 的</strong></p><h2 id="math-toprecision" tabindex="-1"><code>Math.toPrecision()</code> <a class="header-anchor" href="#math-toprecision" aria-label="Permalink to &quot;\`Math.toPrecision()\`&quot;">​</a></h2><ul><li>用于将数字转换为指定精度的字符串表示。该方法接受一个参数，指定返回字符串的总有效位数，包括整数部分和小数部分。</li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">const number = 123.456789;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.log(number.toPrecision(5)); // 输出 &quot;123.46&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.log(number.toPrecision(7)); // 输出 &quot;123.4568&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.log(number.toPrecision(10)); // 输出 &quot;123.456789&quot;</span></span></code></pre></div><p>在上述示例中，我们创建一个数字 <code>number</code>，然后使用 <code>toPrecision()</code> 方法将其转换为指定精度的字符串表示。对于每个例子，传递的参数决定了返回字符串的总有效位数。</p><p>需要注意的是，<code>toPrecision()</code> 方法会自动进行四舍五入操作，以确保返回的字符串具有指定的精度。</p><p>此外，如果传递给 <code>toPrecision()</code> 方法的参数是一个超过数字总位数的值，它将会自动添加零位到整数部分或小数部分，以达到指定的精度。</p><h2 id="math-trunc-x-es6" tabindex="-1"><code>Math.trunc(x)</code>(ES6) <a class="header-anchor" href="#math-trunc-x-es6" aria-label="Permalink to &quot;\`Math.trunc(x)\`(ES6)&quot;">​</a></h2><ul><li><code>Math.trunc(x)</code> 是 JavaScript 中的数学函数之一，用于将一个数字的小数部分舍去，返回其整数部分。</li></ul><p>示例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">trunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">trunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 -3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">trunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 0</span></span></code></pre></div><p>在上述示例中，<code>Math.trunc()</code> 将传入的数字参数 <code>x</code> 的小数部分去除，并返回整数部分。它会对正数和负数均有效，如果值为正数，则直接向下取整；如果值为负数，则向上取整（即绝对值减小，负号保持）。</p><p>需要注意的是，<code>Math.trunc()</code> 只处理数值类型的参数，而非数值类型的参数会被转换为数值类型后再进行截断操作。如果参数无法被转换为数值类型，将返回 NaN。</p><p>示例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">trunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3.14159&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 3，字符串被转换为数值再执行 trunc()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">trunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 1，布尔值 true 被转换为数值 1 再执行 trunc()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">trunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 NaN，无法将字符串转换为数值</span></span></code></pre></div><p>在实际应用中，<code>Math.trunc()</code> 常用于对浮点数进行取整操作，得到其整数部分，而忽略小数部分。</p><h2 id="math-sign-es6" tabindex="-1"><code>Math.sign()</code>(ES6) <a class="header-anchor" href="#math-sign-es6" aria-label="Permalink to &quot;\`Math.sign()\`(ES6)&quot;">​</a></h2><h2 id="math-cbrt-es6" tabindex="-1"><code>Math.cbrt()</code>(ES6) <a class="header-anchor" href="#math-cbrt-es6" aria-label="Permalink to &quot;\`Math.cbrt()\`(ES6)&quot;">​</a></h2><h2 id="math-log2-es6" tabindex="-1"><code>Math.log2()</code>(ES6) <a class="header-anchor" href="#math-log2-es6" aria-label="Permalink to &quot;\`Math.log2()\`(ES6)&quot;">​</a></h2><h2 id="math-log10-es6" tabindex="-1"><code>Math.log10()</code>(ES6) <a class="header-anchor" href="#math-log10-es6" aria-label="Permalink to &quot;\`Math.log10()\`(ES6)&quot;">​</a></h2><h2 id="随机色块" tabindex="-1">随机色块 <a class="header-anchor" href="#随机色块" aria-label="Permalink to &quot;随机色块&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 1 编写一个函数，获得一个十六进制的随机颜色的字符串(例如：#20CD4F)(0-9a-f)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 思考:随机颜色-&gt;Math.random() 0-1   color:red/#ff0000/rgb(255,255,255)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 首先 定义一个数组，用来存储这个0-255之间的这个随机数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 循环遍历输出任意的三位数，放到数组中</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">round</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//[65, 0, 103]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 把上面数组中的每一项遍历，转换为16进制</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;#&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // str = str + arr[i].toString(16);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[i].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//#667788</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      //给页面中的input增加随机的背景色</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      inp.style.background </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res;</span></span></code></pre></div><h2 id="取值区间" tabindex="-1">取值区间 <a class="header-anchor" href="#取值区间" aria-label="Permalink to &quot;取值区间&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//2-5的话</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//公式   ：min+Math.floor（Math.random（）*（Max-min））</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//想要取到5，那就是</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//公式   ：min+Math.floor（Math.random（）*（Max-min+1））</span></span></code></pre></div><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h2><p>这些都是 <code>Math</code> 对象的方法，下面为您解释每个方法的作用：</p><ul><li><code>abs(x)</code>：返回指定数字的绝对值。例如，<code>Math.abs(-10)</code> 的结果是 <code>10</code>。</li><li><code>acos(x)</code>：返回指定数字的反余弦值（弧度）。例如，<code>Math.acos(0.5)</code> 的结果是 <code>1.0471975511965979</code>。</li><li><code>acosh(x)</code>：返回指定数字的反双曲余弦值。例如，<code>Math.acosh(2)</code> 的结果是 <code>1.3169578969248166</code>。</li><li><code>asin(x)</code>：返回指定数字的反正弦值（弧度）。例如，<code>Math.asin(0.5)</code> 的结果是 <code>0.5235987755982989</code>。</li><li><code>asinh(x)</code>：返回指定数字的反双曲正弦值。例如，<code>Math.asinh(2)</code> 的结果是 <code>1.4436354751788103</code>。</li><li><code>atan(x)</code>：返回指定数字的反正切值（弧度）。例如，<code>Math.atan(1)</code> 的结果是 <code>0.7853981633974483</code>。</li><li><code>atan2(y, x)</code>：返回给定的 X 坐标和 Y 坐标的反正切值（弧度）。例如，<code>Math.atan2(1, 1)</code> 的结果是 <code>0.7853981633974483</code>。</li><li><code>atanh(x)</code>：返回指定数字的反双曲正切值。例如，<code>Math.atanh(0.5)</code> 的结果是 <code>0.5493061443340549</code>。</li><li><code>cbrt(x)</code>：返回指定数字的立方根。例如，<code>Math.cbrt(27)</code> 的结果是 <code>3</code>。</li><li><code>ceil(x)</code>：返回大于或等于指定数字的最小整数。例如，<code>Math.ceil(4.3)</code> 的结果是 <code>5</code>。</li><li><code>clz32(x)</code>：返回一个数字在转为 32 位无符号整数后，前导零的个数。例如，<code>Math.clz32(7)</code> 的结果是 <code>29</code>。</li><li><code>cos(x)</code>：返回指定角度的余弦值。例如，<code>Math.cos(Math.PI)</code> 的结果是 <code>-1</code>。</li><li><code>cosh(x)</code>：返回指定数字的双曲余弦值。例如，<code>Math.cosh(0)</code> 的结果是 <code>1</code>。</li><li><code>exp(x)</code>：返回指定数字的指数值。例如，<code>Math.exp(1)</code> 的结果是 <code>2.718281828459045</code>。</li><li><code>expm1(x)</code>：返回 Math.exp(x) - 1 的值。例如，<code>Math.expm1(1)</code> 的结果是 <code>1.718281828459045</code>。</li><li><code>floor(x)</code>：返回小于或等于指定数字的最大整数。例如，<code>Math.floor(4.9)</code> 的结果是 <code>4</code>。</li><li><code>fround(x)</code>：返回指定数字的单精度浮点数表示。例如，<code>Math.fround(1.337)</code> 的结果是 <code>1.3370000123977661</code>。</li><li><code>hypot(...args)</code>：返回一组数字的平方和的平方根。例如，<code>Math.hypot(3, 4)</code> 的结果是 <code>5</code>。</li><li><code>imul(x, y)</code>：返回两个数的 32 位带符号整数乘法结果。例如，<code>Math.imul(2, 3)</code> 的结果是 <code>6</code>。</li><li><code>log(x)</code>：返回指定数字的自然对数（以 e 为底）。例如，<code>Math.log(Math.E)</code> 的结果是 <code>1</code>。</li><li><code>log1p(x)</code>：返回 Math.log(1 + x) 的值。例如，<code>Math.log1p(Math.E - 1)</code> 的结果是 <code>1</code>。</li><li><code>log2(x)</code>：返回以 2 为底的指定数字的对数。例如，<code>Math.log2(8)</code> 的结果是 <code>3</code>。</li><li><code>log10(x)</code>：返回以 10 为底的指定数字的对数。例如，<code>Math.log10(100)</code> 的结果是 <code>2</code>。</li><li><code>max(...args)</code>：返回一组数字中的最大值。例如，<code>Math.max(10, 5, 8)</code> 的结果是 <code>10</code>。</li><li><code>min(...args)</code>：返回一组数字中的最小值。例如，<code>Math.min(10, 5, 8)</code> 的结果是 <code>5</code>。</li><li><code>pow(x, y)</code>：返回 x 的 y 次幂。例如，<code>Math.pow(2, 3)</code> 的结果是 <code>8</code>。</li><li><code>random()</code>：返回一个 0 到 1 之间的随机数。例如，<code>Math.random()</code> 的结果是 <code>0.456789123</code>。</li><li><code>round(x)</code>：返回指定数字的四舍五入值。例如，<code>Math.round(4.5)</code> 的结果是 <code>5</code>。</li><li><code>sign(x)</code>：返回指定数字的符号（正、负或零）。例如，<code>Math.sign(-10)</code> 的结果是 <code>-1</code>。</li><li><code>sin(x)</code>：返回指定角度的正弦值。例如，<code>Math.sin(Math.PI / 2)</code> 的结果是 <code>1</code>。</li><li><code>sinh(x)</code>：返回指定数字的双曲正弦值。例如，<code>Math.sinh(0)</code> 的结果是 <code>0</code>。</li><li><code>sqrt(x)</code>：返回指定数字的平方根。例如，<code>Math.sqrt(16)</code> 的结果是 <code>4</code>。</li><li><code>tan(x)</code>：返回指定角度的正切值。例如，<code>Math.tan(0)</code> 的结果是 <code>0</code>。</li><li><code>tanh(x)</code>：返回指定数字的双曲正切值。例如，<code>Math.tanh(0)</code> 的结果是 <code>0</code>。</li><li><code>trunc(x)</code>：去除指定数字的小数部分，返回整数部分。例如，<code>Math.trunc(4.9)</code> 的结果是 <code>4</code>。</li></ul>`,63),n=[l];function e(p,k,d,o,r,c){return a(),i("div",null,n)}const y=s(t,[["render",e]]);export{g as __pageData,y as default};
