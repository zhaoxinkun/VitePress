import{_ as s,c as i,o as a,a3 as n}from"./chunks/framework.7ep0oyv4.js";const E=JSON.parse('{"title":"null","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/JavaScript/Null.md","filePath":"JavaScript/JavaScript/Null.md","lastUpdated":null}'),l={name:"JavaScript/JavaScript/Null.md"},p=n(`<h1 id="null" tabindex="-1">null <a class="header-anchor" href="#null" aria-label="Permalink to &quot;null&quot;">​</a></h1><p>函数的返回值中,可能写null。</p><blockquote><p>📌Null表示一个空对象的指针,所以typeOf null返回object</p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> car </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> car)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">只要变量保存空对象,而当时又没有对象可以保存,就使用null来填充该变量.</span></span></code></pre></div><p>当一个变量不再使用时,可以设置为null,这样浏览器的垃圾回收机制,会将其回收.（GC：垃圾回收）</p><p>NaN产生的场景 1 转化失败 2 运算失败</p><p>NaN 的类型number</p><p>任何两个NaN都不相等</p><p>空值与 <code>undefined</code> 无关。</p><p>空字符串既有法律的值又有类型。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> car </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The value is &quot;&quot;, the typeof is &quot;string&quot;</span></span></code></pre></div><h2 id="typeof-null-的结果是什么-为什么" tabindex="-1">typeof null 的结果是什么，为什么？ <a class="header-anchor" href="#typeof-null-的结果是什么-为什么" aria-label="Permalink to &quot;typeof null 的结果是什么，为什么？ &amp;#x20;&quot;">​</a></h2><p>typeof null 的结果是Object。 </p><p>在 JavaScript 第一个版本中，所有值都存储在 32 位的单元中，每个单元包含一个小的类型标签(1-3 bits) 以及当前要存储值的真实数据。类型标签存储在每个单元的低位中，共有五种数据类型： </p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: object   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 当前存储的数据指向一个对象。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: int      </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 当前存储的数据是一个 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">31</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 位的有符号整数。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">010</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: double   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 当前存储的数据指向一个双精度的浮点数。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 当前存储的数据指向一个字符串。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">110</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: boolean  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 当前存储的数据是布尔值。</span></span></code></pre></div><p>如果最低位是 1，则类型标签标志位的长度只有一位；如果最低位是 0，则类型标签标志位的长度占三位，为存储其他四种数据类型提供了额外两个 bit 的长度。 </p><p>有两种特殊数据类型： </p><p>●undefined的值是 (-2)30(一个超出整数范围的数字)； </p><p>●null 的值是机器码 NULL 指针(null 指针的值全是 0) </p><p>那也就是说null的类型标签也是000，和Object的类型标签一样，所以会被判定为Object。</p><h2 id="null和undefined区别" tabindex="-1">null和undefined区别 <a class="header-anchor" href="#null和undefined区别" aria-label="Permalink to &quot;null和undefined区别&quot;">​</a></h2><p></p><p>首先 Undefined 和 Null 都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 undefined 和 null。 </p><p>undefined 代表的含义是未定义，null 代表的含义是空对象。一般变量声明了但还没有定义的时候会返回 undefined，null主要用于赋值给一些可能会返回对象的变量，作为初始化。 </p><p>undefined 在 JavaScript 中不是一个保留字，这意味着可以使用 undefined 来作为一个变量名，但是这样的做法是非常危险的，它会影响对 undefined 值的判断。我们可以通过一些方法获得安全的 undefined 值，比如说 void 0。</p><p>当对这两种类型使用 typeof 进行判断时，Null 类型化会返回 “object”，这是一个历史遗留的问题。当使用双等号对两种类型的值进行比较时会返回 true，使用三个等号时会返回 false。</p>`,26),t=[p];function e(h,k,d,r,c,o){return a(),i("div",null,t)}const g=s(l,[["render",e]]);export{E as __pageData,g as default};
